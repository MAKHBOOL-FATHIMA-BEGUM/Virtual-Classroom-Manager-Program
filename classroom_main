package Ei;
import java.util.*;
public class VirtualClassroomManager {
    private static Map<String, Classroom> classrooms = new HashMap<>();
    private static Map<String, Student> students = new HashMap<>();
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Enter command: ");
            String input = scanner.nextLine();
            String[] parts = input.split(" ", 3);

            // Ensure there's at least a command
            if (parts.length < 2) {
                System.out.println("Invalid command.");
                continue;
            }

            String command = parts[0];
            String arg1 = parts[1];
            String arg2 = parts.length > 2 ? parts[2] : "";
            System.out.println(command);
            System.out.println(arg1);
            System.out.println(arg2);

            try {
                switch (command) {
                    case "add_classroom":
                        addClassroom(arg1);
                        break;
                    case "remove_classroom":
                        removeClassroom(arg1);
                        break;
                    case "add_student":
                        addStudent(arg1, arg2);
                        break;
                    case "schedule_assignment":
                        scheduleAssignment(arg1, arg2);
                        break;
                    case "submit_assignment":
                        String[] submissionParts = arg2.split(" ", 2);
                        if (submissionParts.length < 2) {
                            System.out.println("Invalid submission format.");
                            break;
                        }
                        submitAssignment(arg1, submissionParts[0], submissionParts[1]);
                        break;
                    case "list_classrooms":
                        listClassrooms();
                        break;
                    case "list_students":
                        listStudents(arg1);
                        break;
                    default:
                        System.out.println("Unknown command.");
                        break;
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void addClassroom(String className) {
        if (classrooms.containsKey(className)) {
            System.out.println("Classroom already exists.");
        } else {
            classrooms.put(className, new Classroom(className));
            System.out.println("Classroom " + className + " has been created.");
        }
    }

    private static void removeClassroom(String className) {
        if (!classrooms.containsKey(className)) {
            System.out.println("Classroom does not exist.");
        } else {
            // Remove the classroom
            classrooms.remove(className);
            System.out.println("Classroom " + className + " has been removed.");
        }
    }

    private static void addStudent(String studentId, String className) {
        if (!classrooms.containsKey(className)) {
            System.out.println("Classroom does not exist.");
            return;
        }
        Student student = new Student(studentId);
        students.put(studentId, student);
        classrooms.get(className).addStudent(student);
        System.out.println("Student " + studentId + " has been enrolled in " + className + ".");
    }

    private static void scheduleAssignment(String className, String assignmentDetails) {
        if (!classrooms.containsKey(className)) {
            System.out.println("Classroom does not exist.");
            return;
        }
        classrooms.get(className).addAssignment(new Assignment(assignmentDetails));
        System.out.println("Assignment for " + className + " has been scheduled.");
    }

    private static void submitAssignment(String studentId, String className, String assignmentDetails) {
        if (!classrooms.containsKey(className) || !students.containsKey(studentId)) {
            System.out.println("Invalid student or classroom.");
            return;
        }
        Classroom classroom = classrooms.get(className);
        classroom.submitAssignment(studentId, assignmentDetails);
        System.out.println("Assignment submitted by Student " + studentId + " in " + className + ".");
    }

    private static void listClassrooms() {
        if (classrooms.isEmpty()) {
            System.out.println("No classrooms available.");
        } else {
            for (String className : classrooms.keySet()) {
                System.out.println("Classroom: " + className);
            }
        }
    }

    private static void listStudents(String className) {
        if (!classrooms.containsKey(className)) {
            System.out.println("Classroom does not exist.");
            return;
        }
        Classroom classroom = classrooms.get(className);
        List<Student> studentList = classroom.getStudents();
        if (studentList.isEmpty()) {
            System.out.println("No students in " + className + ".");
        } else {
            for (Student student : studentList) {
                System.out.println("Student ID: " + student.getId());
            }
        }
    }
}
class Classroom {
    private String name;
    private List<Student> students = new ArrayList<>();
    private List<Assignment> assignments = new ArrayList<>();
    private Map<String, String> submissions = new HashMap<>();

    public Classroom(String name) {
        this.name = name;
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public List<Student> getStudents() {
        return students;
    }

    public void addAssignment(Assignment assignment) {
        assignments.add(assignment);
    }

    public void submitAssignment(String studentId, String assignmentDetails) {
        submissions.put(studentId, assignmentDetails);
    }
}
class Student {
    private String id;

    public Student(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }
}
class Assignment {
    private String details;

    public Assignment(String details) {
        this.details = details;
    }
    public String getDetails() {
        return details;
    }
}
